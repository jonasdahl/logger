// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  fogisUsername     String?
  password          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  deletedAt         DateTime?
  polarUserId       Int?
  polarAccessToken  String?
  onboardedAt       DateTime?
  lastFogisSync     DateTime?
  fogisGames        FogisGame[]
  activities        Activity[]
  polarExercises    PolarExercise[]
  plannedActivities PlannedActivity[]
}

enum RefereeRole {
  Center
  Assistant
  Fourth
}

model FogisGame {
  id String @id @default(uuid())

  time              DateTime
  homeTeam          String
  awayTeam          String
  facility          String
  positionLongitude Float?
  positionLatitude  Float?
  role              RefereeRole
  gameId            String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Activity {
  id          String   @id @default(uuid())
  time        DateTime
  comment     String?
  description String?

  primaryPurpose     ActivityPurpose? @relation(name: "primaryPurpose", fields: [primaryPurposeId], references: [id])
  primaryPurposeId   String?
  secondaryPurpose   ActivityPurpose? @relation(name: "secondaryPurpose", fields: [secondaryPurposeId], references: [id])
  secondaryPurposeId String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PlannedActivity {
  id          String   @id @default(uuid())
  time        DateTime
  comment     String?
  description String?

  primaryPurpose     ActivityPurpose? @relation(name: "primaryPurposePlanned", fields: [primaryPurposeId], references: [id])
  primaryPurposeId   String?
  secondaryPurpose   ActivityPurpose? @relation(name: "secondaryPurposePlanned", fields: [secondaryPurposeId], references: [id])
  secondaryPurposeId String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PolarExercise {
  id String @id @default(uuid())

  polarId    Int      @unique
  raw        String
  uploadTime DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  startTime  DateTime
  samples    String?
}

model ActivityPurpose {
  id String @id @default(uuid())

  label                    String
  primaryPurposes          Activity[]        @relation(name: "primaryPurpose")
  secondaryPurposes        Activity[]        @relation(name: "secondaryPurpose")
  primaryPurposesPlanned   PlannedActivity[] @relation(name: "primaryPurposePlanned")
  secondaryPurposesPlanned PlannedActivity[] @relation(name: "secondaryPurposePlanned")
}

model PolarWebhook {
  id String @id @default(uuid())

  polarWebhookId                 String
  polarWebhookSignatureSecretKey String
}
