// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  fogisUsername     String?
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  deletedAt         DateTime?
  polarUserId       Int?
  polarAccessToken  String?
  onboardedAt       DateTime?
  lastFogisSync     DateTime?
  maxPulse          Int?
  fogisGames        FogisGame[]
  activities        Activity[]
  polarExercises    PolarExercise[]
  plannedActivities PlannedActivity[]
  pushSubscriptions PushSubscription[]
  physicalTests     PhysicalTest[]
  exerciseTypes     ExerciseType[]
  customGames       CustomGame[]
  travels           Travel[]
  categoryTags      CategoryTag[]
  Goal              Goal[]
}

model PushSubscription {
  id String @id @default(uuid())

  endpoint  String @unique
  keyP256dh String
  keyAuth   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

enum RefereeRole {
  Center
  Assistant
  Fourth
}

model FogisGame {
  id String @id @default(uuid())

  time              DateTime
  homeTeam          String
  awayTeam          String
  facility          String
  positionLongitude Float?
  positionLatitude  Float?
  role              RefereeRole
  gameId            String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CustomGame {
  id String @id @default(uuid())

  time              DateTime
  homeTeam          String?
  awayTeam          String?
  facility          String?
  positionLongitude Float?
  positionLatitude  Float?
  role              RefereeRole?
  gameId            String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ExerciseAmountType {
  Time
  Distance
  Repetitions
  Levels
}

model ExerciseType {
  id                        String              @id @default(uuid())
  name                      String
  defaultExerciseAmountType ExerciseAmountType  @default(Time)
  loads                     ExerciseLoadType[]
  levels                    ExerciseTypeLevel[]

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  deletedAt              DateTime?
  exerciseItems          ExerciseItem[]
  categoryTags           CategoryTag[]
  inGoals                Goal[]                @relation(name: "PerformExerciseTypeGoal")
  inPlannedExerciseItems PlannedExerciseItem[]
}

model ExerciseTypeLevel {
  id    String @id @default(uuid())
  name  String
  order Float?

  exerciseTypeId String
  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])

  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deletedAt               DateTime?
  exerciseItemLoadAmounts ExerciseItemLoadAmount[]
}

model ExerciseLoadType {
  id   String  @id @default(uuid())
  name String
  unit String?

  exerciseTypeId String
  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  deletedAt      DateTime?
  performedLoads ExerciseItemLoad[]
}

model Activity {
  id          String   @id @default(uuid())
  time        DateTime
  comment     String?
  description String?

  primaryPurpose     ActivityPurpose? @relation(name: "primaryPurpose", fields: [primaryPurposeId], references: [id])
  primaryPurposeId   String?
  secondaryPurpose   ActivityPurpose? @relation(name: "secondaryPurpose", fields: [secondaryPurposeId], references: [id])
  secondaryPurposeId String?

  isHiddenFromOverview Boolean @default(false)

  fromPlannedActivity   PlannedActivity? @relation(fields: [fromPlannedActivityId], references: [id])
  fromPlannedActivityId String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  exerciseItems ExerciseItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ExerciseItem {
  id String @id @default(uuid())

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id])

  exerciseTypeId String
  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])

  loadAmounts ExerciseItemLoadAmount[]

  order Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ExerciseItemLoadAmount {
  id String @id @default(uuid())

  exerciseItemId String
  exerciseItem   ExerciseItem @relation(fields: [exerciseItemId], references: [id])

  amountType                 ExerciseAmountType
  amountDurationMilliSeconds BigInt?
  amountRepetitions          Int?
  amountLevelId              String?
  amountLevel                ExerciseTypeLevel? @relation(fields: [amountLevelId], references: [id])
  loads                      ExerciseItemLoad[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ExerciseItemLoad {
  id String @id @default(uuid())

  exerciseItemLoadAmountId String
  exerciseItemLoadAmount   ExerciseItemLoadAmount @relation(fields: [exerciseItemLoadAmountId], references: [id])

  exerciseLoadTypeId String
  exerciseLoadType   ExerciseLoadType @relation(fields: [exerciseLoadTypeId], references: [id])

  amountValue Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PlannedActivity {
  id          String   @id @default(uuid())
  time        DateTime
  comment     String?
  description String?

  primaryPurpose     ActivityPurpose? @relation(name: "primaryPurposePlanned", fields: [primaryPurposeId], references: [id])
  primaryPurposeId   String?
  secondaryPurpose   ActivityPurpose? @relation(name: "secondaryPurposePlanned", fields: [secondaryPurposeId], references: [id])
  secondaryPurposeId String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  deletedAt           DateTime?
  generatedActivities Activity[]

  items PlannedExerciseItem[]
}

enum PlannedExerciseItemType {
  Exercise
  OneOfChildren
}

model PlannedExerciseItem {
  id String @id @default(uuid())

  plannedActivity   PlannedActivity @relation(fields: [plannedActivityId], references: [id])
  plannedActivityId String

  type PlannedExerciseItemType

  typeExerciseExerciseType    ExerciseType? @relation(fields: [typeExerciseExerciseTypeId], references: [id])
  typeExerciseExerciseTypeId  String?
  typeExerciseRepetitions     Int?
  typeExerciseDurationSeconds Int?

  typeOneOfChildrenPlannedExerciseItems PlannedExerciseItem[] @relation(name: "OneOfChildren")

  order Float

  parentItem   PlannedExerciseItem? @relation(name: "OneOfChildren", fields: [parentItemId], references: [id])
  parentItemId String?
}

model PolarExercise {
  id String @id @default(uuid())

  polarId    Int      @unique
  raw        String
  uploadTime DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  startTime  DateTime
  samples    String?
}

model ActivityPurpose {
  id String @id @default(uuid())

  label      String
  shortLabel String?

  primaryPurposes          Activity[]        @relation(name: "primaryPurpose")
  secondaryPurposes        Activity[]        @relation(name: "secondaryPurpose")
  primaryPurposesPlanned   PlannedActivity[] @relation(name: "primaryPurposePlanned")
  secondaryPurposesPlanned PlannedActivity[] @relation(name: "secondaryPurposePlanned")
}

model PolarWebhook {
  id String @id @default(uuid())

  polarWebhookId                 String
  polarWebhookSignatureSecretKey String
}

model PhysicalTest {
  id String @id @default(uuid())

  time DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LawsQuestion {
  id String @id @default(uuid())

  question           String
  answerAlternatives LawsQuestionAnswerAlternative[]
  isEnabled          Boolean                         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LawsQuestionAnswerAlternative {
  id String @id @default(uuid())

  text      String
  isCorrect Boolean

  questionId String
  question   LawsQuestion @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Travel {
  id    String   @id @default(uuid())
  start DateTime
  end   DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryTag {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  exerciseTypes ExerciseType[]
}

enum GoalType {
  PerformExerciseType
  DayOfRest
  DayOfWork
}

enum GoalTimeType {
  EveryCalendarYear
  EveryCalendarMonth
  EveryCalendarWeek
  EveryRollingNumberOfDays
}

model Goal {
  id String @id @default(uuid())

  name        String
  description String?
  type        GoalType
  timeType    GoalTimeType

  timeTypeEveryRollingNumberOfDaysAmount Int?

  typePerformExerciseTypeExerciseTypeId String?
  typePerformExerciseTypeExerciseType   ExerciseType? @relation(name: "PerformExerciseTypeGoal", fields: [typePerformExerciseTypeExerciseTypeId], references: [id])
  typePerformExerciseTypeNumberOfDays   Int?
  typeDayOfRestNumberOfDays             Int?
  typeDayOfWorkNumberOfDays             Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
